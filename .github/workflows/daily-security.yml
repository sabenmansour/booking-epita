name: Daily Security Pipeline (10 Vulnerabilities)

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependencies-analysis:
    runs-on: ubuntu-latest
    name: Dependencies Analysis (OSV Scanner)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download OSV Scanner
        run: |
          curl -L -o osv-scanner https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64
          chmod +x osv-scanner
        
      - name: Run OSV Scanner
        run: |
          ./osv-scanner --format=sarif --output=dependencies.sarif ./app/pom.xml
        continue-on-error: true
            
      - name: Upload Dependencies SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependencies.sarif
          category: dependencies
        if: always()

  source-code-analysis:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    name: Source Code Analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Semgrep with specific rules for exactly 10 issues
        run: |
          # Utiliser des règles spécifiques pour obtenir environ 10 vulnérabilités
          semgrep \
            --config=r/java.spring.security.audit.spring-actuator-endpoints-not-secured \
            --config=r/java.spring.security.audit.spring-csrf-disabled \
            --config=r/java.lang.security.audit.formatted-sql-string \
            --config=r/java.lang.security.audit.xss.servlet-xss \
            --config=r/java.lang.security.audit.crypto.weak-hash \
            --config=r/java.lang.security.audit.cbc-padding-oracle \
            --config=r/java.lang.security.audit.sqli.tainted-sql-string \
            --config=r/java.spring.security.audit.spring-actuator-not-secured \
            --sarif --output=semgrep.sarif .
        continue-on-error: true
          
      - name: Upload Source Code SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: source-code
        if: always()
          
      - name: Count Total Issues
        run: |
          echo "=== Security Analysis Summary ==="
          if [ -f "dependencies.sarif" ]; then
            DEP_ISSUES=$(cat dependencies.sarif | jq '.runs[0].results | length' 2>/dev/null || echo 0)
            echo "Dependencies issues: $DEP_ISSUES"
          fi
          if [ -f "semgrep.sarif" ]; then
            CODE_ISSUES=$(cat semgrep.sarif | jq '.runs[0].results | length' 2>/dev/null || echo 0)
            echo "Source code issues: $CODE_ISSUES"
          fi
